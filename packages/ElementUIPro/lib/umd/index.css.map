{"version":3,"file":"index.css","mappings":"AAEE,4EACE,iBAEF,4FACE,8BAEF,+DACE,8BACA,kBACA,0BC6QJ,yBACA,uBACA,0BACA,aACA,sBAEA,YADA,UAEA,CAEA,wBAIA,sBAHA,aACA,YAGA,gBAFA,WAGA,CAEA,oCACA,SACA,CAEA,0CACA,+BACA,CAEA,4DACA,iCACA,CAEA,qDACA,SACA,CAEA,uBAOA,mBAJA,sBAEA,aADA,aAHA,YACA,cAIA,uBAEA,WACA,CAEA,yCACA,6DACA,CAEA,uDACA,sDACA,CCxUE,mEACE,iBAEF,yDACE,8BACA,kBACA","sources":["webpack://ElementUIPro/./src/ElCheckboxGroupPro.vue","webpack://ElementUIPro/./src/ElTablePro/index.vue","webpack://ElementUIPro/./src/ElRadioGroupPro.vue"],"sourcesContent":[null,"<template>\r\n  <div\r\n    class=\"gislife-table-container\"\r\n    v-loading=\"loading\"\r\n    :type=\"height\"\r\n    :empty=\"isEmpty\"\r\n  >\r\n    <div class=\"gislife-table__content\">\r\n      <el-table\r\n        ref=\"table\"\r\n        :data=\"tableData || data\"\r\n        :border=\"border\"\r\n        v-bind=\"$attrs\"\r\n        v-on=\"$listeners\"\r\n        :height=\"tableHeight\"\r\n        style=\"max-width: 100%\"\r\n      >\r\n        <!-- 普通列 -->\r\n        <template v-for=\"(item, index) of columns\">\r\n          <Column\r\n            v-if=\"item.children && item.children.length\"\r\n            :columnsHeader=\"item\"\r\n            :key=\"item\"\r\n          >\r\n          </Column>\r\n          <el-table-column\r\n            v-else-if=\"item.type === 'index' || item.type === 'selection'\"\r\n            :key=\"index\"\r\n            v-bind=\"item\"\r\n            :align=\"item.align || 'center'\"\r\n            :show-overflow-tooltip=\"\r\n              item.overflowTooltip === void 0 ? true : item.overflowTooltip\r\n            \"\r\n          >\r\n          </el-table-column>\r\n          <el-table-column\r\n            v-else\r\n            :key=\"index\"\r\n            v-bind=\"item\"\r\n            :align=\"item.align || 'center'\"\r\n            :show-overflow-tooltip=\"\r\n              item.overflowTooltip === void 0 ? true : item.overflowTooltip\r\n            \"\r\n          >\r\n            <template #default=\"scope\">\r\n              <!-- 插槽,插槽名为对应prop,不使用可不写插槽 -->\r\n              <span v-bind=\"Object.assign({}, scope.row, item)\">\r\n                <slot :name=\"item.prop\" :column=\"scope.column\" :row=\"scope.row\">\r\n                  {{\r\n                    item.format ? item.format(scope.row[item.prop]) : scope.row[item.prop]\r\n                  }}\r\n                </slot>\r\n              </span>\r\n            </template>\r\n          </el-table-column>\r\n        </template>\r\n        <!-- 表格尾部插槽 -->\r\n        <slot name=\"append\"></slot>\r\n        <!-- 暂无数据提示 -->\r\n        <template v-slot:empty>\r\n          <slot name=\"empty\"> 暂无数据 </slot>\r\n        </template>\r\n      </el-table>\r\n    </div>\r\n    <div v-if=\"isPager\" class=\"gislife-table__footer\">\r\n      <pagination\r\n        :pageParams.sync=\"pageParams\"\r\n        :total=\"total\"\r\n        :pagerConfig=\"pagerConfig\"\r\n        @size-change=\"() => refresh()\"\r\n        @current-change=\"() => refresh()\"\r\n        @prev-click=\"() => refresh()\"\r\n        @next-click=\"() => refresh()\"\r\n      >\r\n      </pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from '../utils/Ajax';\r\nimport Column from './columnGroup';\r\nimport pagination from './PaginationPro.vue';\r\nimport * as Utils from '../utils/utils';\r\nexport default {\r\n  name: 'ElTablePro',\r\n  inheritAttrs: false,\r\n  components: {\r\n    Column,\r\n    pagination,\r\n  },\r\n  props: {\r\n    columns: {\r\n      // 表头\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    data: {\r\n      //表格数据\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    isPager: {\r\n      // 是否分页\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    border: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    pageNo: {\r\n      // 分页参数\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    pageSize: {\r\n      // 分页参数\r\n      type: Number,\r\n      default: 10,\r\n    },\r\n    height: {\r\n      //表格高度\r\n      type: String,\r\n      default: '100%',\r\n    },\r\n    // pagination配置\r\n    pagerConfig: Object,\r\n    query: {\r\n      // 查询参数\r\n      Type: Object,\r\n      default() {\r\n        return {};\r\n      },\r\n    },\r\n    //数据获取方法\r\n    fetch: Function,\r\n    //请求参数\r\n    baseURL: {\r\n      type: String,\r\n    },\r\n    // 获取表格数据接口Api\r\n    url: {\r\n      type: String,\r\n    },\r\n    // 请求方法（默认POST）\r\n    reqMethods: {\r\n      Type: String,\r\n      default: 'POST',\r\n    },\r\n    // 解析表格数据\r\n    dataCallback: {\r\n      Type: Function,\r\n      default() {\r\n        return (data) => {\r\n          return { data: data.data, total: data.totalCount };\r\n        };\r\n      },\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      total: 0,\r\n      loading: false,\r\n      tableData: null,\r\n      maxHeight: 300,\r\n      pageParams: { pageNo: this.pageNo, pageSize: this.pageSize },\r\n      clcHeight: null,\r\n    };\r\n  },\r\n  computed: {\r\n    queryData: {\r\n      get() {\r\n        return { ...this.query, ...this.pageParams };\r\n      },\r\n      set(val) {\r\n        this.$emit('changeQuery', val);\r\n      },\r\n    },\r\n    tableHeight: {\r\n      get() {\r\n        return this.height === 'auto' ? this.clcHeight : this.height;\r\n      },\r\n    },\r\n    isEmpty() {\r\n      return (this.tableData || this.data || []).length === 0;\r\n    },\r\n  },\r\n  created() {\r\n    this.refresh();\r\n  },\r\n  mounted() {\r\n    this.$nextTick(this.observeTableBody);\r\n  },\r\n  methods: {\r\n    /**\r\n     * @description 刷新数据\r\n     * @param {object} query 查询参数\r\n     * @param {function} fetchDone 数据获取完成回调\r\n     * @returns {promise}\r\n     */\r\n    async refresh(query, fetchDone) {\r\n      await new Promise((resolve) => {\r\n        setTimeout(resolve);\r\n      });\r\n      try {\r\n        const params = Object.assign({}, this.queryData, query);\r\n        this.loading = true;\r\n        const dataS = await this.getData(params);\r\n        if (dataS) {\r\n          const { data, total } = this.dataCallback(dataS);\r\n          this.tableData = data;\r\n          this.total = total;\r\n          this.$emit('onData', data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        fetchDone?.();\r\n        this.loading = false;\r\n      }\r\n    },\r\n    /**\r\n     * @description 获取数据\r\n     * @param {object} query 查询参数\r\n     */\r\n    async getData(query) {\r\n      if (!this.url && !this.fetch) {\r\n        return;\r\n      }\r\n      if (this.fetch) {\r\n        return this.fetch(query);\r\n      } else {\r\n        const reqOps = {\r\n          baseURL: this.baseURL,\r\n          url: this.url,\r\n          method: this.reqMethods,\r\n        };\r\n        this.reqMethods.toUpperCase() === 'POST' ?\r\n          (reqOps.data = query)\r\n        : (reqOps.params = query);\r\n        return request(reqOps);\r\n      }\r\n    },\r\n\r\n    calcIndex(index, pgCfg = 'pageParams') {\r\n      if (this.isPager) {\r\n        const { pageNo, pageSize } = this[pgCfg];\r\n        return index + (pageNo - 1) * pageSize + 1;\r\n      } else {\r\n        return index + 1;\r\n      }\r\n    },\r\n\r\n    observeTableBody() {\r\n      if (this.height !== 'auto') return;\r\n      const tableEl = this.$refs.table.$el;\r\n      this.__observeCancel?.();\r\n      this.__observeCancel = Utils.observeEl(\r\n        tableEl.querySelector('.el-table__body'),\r\n        (target) => {\r\n          const { isEmpty } = this;\r\n          const headerBlock = tableEl.querySelector('.el-table__header');\r\n          const bodyHeight =\r\n            isEmpty ? 60 : Number(getComputedStyle(target).height.replace('px', ''));\r\n          this.clcHeight =\r\n            bodyHeight +\r\n            Number(getComputedStyle(headerBlock).height.replace('px', '')) +\r\n            2 +\r\n            'px';\r\n          console.log('this.clcHeight', this.clcHeight);\r\n        },\r\n      );\r\n      this.$on('hook:beforeDestroy', this.__observeCancel);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"css\">\r\n.gislife-table-container {\r\n  --inner-margin-top: 8px;\r\n  --inner-border-radius: 4px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.gislife-table__content {\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  padding: 8px 8px;\r\n  background-color: #fff;\r\n  overflow: hidden;\r\n}\r\n\r\n.gislife-table-container[type='auto'] {\r\n  all: unset;\r\n}\r\n\r\n.gislife-table-container[empty] .el-table {\r\n  border-bottom: 1px solid #e5edf6;\r\n}\r\n\r\n.gislife-table-container[type='auto'] > .gislife-table__content {\r\n  overflow: unset;\r\n}\r\n\r\n.gislife-table-container[type='auto'] .el-table::before {\r\n  all: unset;\r\n}\r\n\r\n.gislife-table__footer {\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  background-color: #fff;\r\n  flex-basis: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 8px 8px;\r\n}\r\n\r\n.gislife-table-container > :not(.absolute) {\r\n  border-radius: var(--border-radius, var(--inner-border-radius));\r\n}\r\n\r\n.gislife-table-container > :not([hidden]) ~ :not([hidden]) {\r\n  margin-top: var(--el-spacing-y, var(--inner-margin-top));\r\n}\r\n</style>\r\n"],"names":[],"sourceRoot":""}